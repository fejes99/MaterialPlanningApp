app TestApp {
  wasp: {
    version: "^0.12.0"
  },
  title: "Material Planning",
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {
        userSignupFields: import { userSignupFields } from "@src/auth/operations/signup.js",
      }
    },
    onAuthFailedRedirectTo: "/login"
  },
  client: {
    rootComponent: import Root from "@src/pages/RootPage.tsx"
  },
  db: {
    system: PostgreSQL,
    seeds: [
      import { materialSeed } from "@src/seeds.js",
      import { productSeed } from "@src/seeds.js",
      import { supplierSeed } from "@src/seeds.js"
    ]
  }
}

// ----------------- Pages ------------------ //

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@src/auth/pages/SignupPage.tsx"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/auth/pages/LoginPage.tsx"
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  authRequired: true,
  component: import Main from "@src/pages/MainPage.tsx"
}

route MaterialRoute { path: "/materials", to: MaterialPage }
page MaterialPage {
  authRequired: true,
  component: import Material from "@src/materials/pages/MaterialPage.tsx"
}

route ProductRoute { path: "/products", to: ProductPage }
page ProductPage {
  authRequired: true,
  component: import Product from "@src/products/pages/ProductPage.tsx"
}

route ProductionPlanRoute { path: "/production-plans", to: ProductionPlanPage }
page ProductionPlanPage {
  authRequired: true,
  component: import ProductionPlan from "@src/productionPlans/pages/ProductionPlanPage.tsx"
}

route ReservationRoute { path: "/reservations", to: ReservationPage }
page ReservationPage {
  authRequired: true,
  component: import Reservation from "@src/reservations/pages/ReservationPage.tsx"
}

route PurchaseRequestRoute { path: "/purchase-requests", to: PurchaseRequestPage }
page PurchaseRequestPage {
  authRequired: true,
  component: import PurchaseRequest from "@src/purchaseRequests/pages/PurchaseRequestPage.tsx"
}

route PurchaseOrderRoute { path: "/purchase-orders", to: PurchaseOrderPage }
page PurchaseOrderPage {
  authRequired: true,
  component: import PurchaseOrder from "@src/purchaseOrders/pages/PurchaseOrderPage.tsx"
}

route SupplierRoute { path: "/suppliers", to: SupplierPage }
page SupplierPage {
  authRequired: true,
  component: import Supplier from "@src/suppliers/pages/SupplierPage.tsx"
}

route SupplierConfirmationRoute { path: "/supplier-confirmations", to: SupplierConfirmationPage }
page SupplierConfirmationPage {
  authRequired: true,
  component: import Supplier from "@src/supplierConfirmations/pages/SupplierConfirmationPage.tsx"
}

route ReceiptRoute { path: "/receipts", to: ReceiptPage }
page ReceiptPage {
  authRequired: true,
  component: import Receipt from "@src/receipts/pages/ReceiptPage.tsx"
}

// ----------------- Entities ------------------ //

entity User {=psl
  id                        Int               @id @default(autoincrement())
  name                      String?
  surrname                  String?
  role                      String?
  reservations              Reservation[]
  createdPurchaseRequests   PurchaseRequest[] @relation(name: "createdBy")
  processedPurchaseRequests PurchaseRequest[] @relation(name: "processedBy")
  purchaseOrders            PurchaseOrder[]
psl=}

entity Material {=psl
  id                    Int                             @id @default(autoincrement())
  code                  String                          @unique
  name                  String
  count                 Float
  measurementUnit       String
  products              ProductMaterials[]
  reservations          ReservationMaterials[]
  purchaseRequests      PurchaseRequestMaterials[]
  purchaseOrders        PurchaseOrderMaterials[]
  supplierConfirmations SupplierConfirmationMaterials[]
  receipts              ReceiptMaterials[]
psl=}

entity Product {=psl
  id              Int                      @id @default(autoincrement())
  code            String                   @unique
  name            String
  description     String
  materials       ProductMaterials[]       
  productionPlans ProductionPlanProducts[]
psl=}

entity ProductMaterials {=psl
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       Int
  material        Material @relation(fields: [materialId], references: [id])
  materialId      Int
  materialCount   Float
  measurementUnit String
  
  @@id([productId, materialId])
psl=}

entity ProductionPlan {=psl
  id           Int                      @id @default(autoincrement())
  code         String                   @unique
  createdAt    DateTime                 @default(now())
  createdFor   DateTime
  status       String
  products     ProductionPlanProducts[]
  reservations Reservation[]
psl=}

entity ProductionPlanProducts {=psl
  productionPlan   ProductionPlan @relation(fields: [productionPlanId], references: [id], onDelete: Cascade)
  productionPlanId Int
  product          Product        @relation(fields: [productId], references: [id])
  productId        Int
  productCount     Int
  
  @@id([productionPlanId, productId])
psl=}

entity Reservation {=psl
  id               Int                    @id @default(autoincrement())
  createdAt        DateTime               @default(now())
  createdFor       DateTime
  status           String
  user             User?                  @relation(fields: [userId], references: [id])
  userId           Int?
  productionPlan   ProductionPlan         @relation(fields: [productionPlanId], references: [id])
  productionPlanId Int
  materials        ReservationMaterials[]
psl=}

entity ReservationMaterials {=psl
  reservation     Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  reservationId   Int
  material        Material    @relation(fields: [materialId], references: [id])
  materialId      Int
  materialCount   Float
  measurementUnit String

  @@id([reservationId, materialId])
psl=}

entity PurchaseRequest {=psl
  id             Int                        @id @default(autoincrement())
  createdAt      DateTime                   @default(now())
  status         String
  processingDate DateTime?
  deliveryDate   DateTime?
  receiptDate    DateTime?
  author         User                       @relation(name: "createdBy", fields: [authorId], references: [id])
  authorId       Int
  processedBy    User?                      @relation(name: "processedBy", fields: [processedById], references: [id])
  processedById  Int?
  materials      PurchaseRequestMaterials[]
  purchaseOrders PurchaseOrder[]
psl=}

entity PurchaseRequestMaterials {=psl
  purchaseRequest   PurchaseRequest @relation(fields: [purchaseRequestId], references: [id], onDelete: Cascade)
  purchaseRequestId Int
  material          Material        @relation(fields: [materialId], references: [id])
  materialId        Int
  materialCount     Float
  measurementUnit   String

  @@id([purchaseRequestId, materialId])
psl=}

entity Supplier {=psl
  id                    Int                    @id @default(autoincrement())
  name                  String                 @unique
  address               String
  purchaseOrders        PurchaseOrder[]
  supplierConfirmations SupplierConfirmation[]
psl=}

entity PurchaseOrder {=psl
  id                     Int                      @id @default(autoincrement())
  createdAt              DateTime                 @default(now())
  user                   User                     @relation(fields: [userId], references: [id])
  userId                 Int
  supplier               Supplier                 @relation(fields: [supplierId], references: [id])
  supplierId             Int                  
  purchaseRequest        PurchaseRequest          @relation(fields: [purchaseRequestId], references: [id])
  purchaseRequestId      Int
  supplierConfirmation   SupplierConfirmation?
  receipt                Receipt?
  materials              PurchaseOrderMaterials[]
psl=}

entity PurchaseOrderMaterials {=psl
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  purchaseOrderId Int
  material        Material      @relation(fields: [materialId], references: [id])
  materialId      Int
  materialCount   Float
  measurementUnit String

  @@id([purchaseOrderId, materialId])
psl=}

entity SupplierConfirmation {=psl
  id              Int                             @id @default(autoincrement())
  createdAt       DateTime                        @default(now())
  deliveryDate    DateTime
  purchaseOrder   PurchaseOrder                   @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int                             @unique
  supplier        Supplier                        @relation(fields: [supplierId], references: [id])
  supplierId      Int
  materials       SupplierConfirmationMaterials[]
psl=}

entity SupplierConfirmationMaterials {=psl
  supplierConfirmation   SupplierConfirmation @relation(fields: [supplierConfirmationId], references: [id])
  supplierConfirmationId Int
  material               Material             @relation(fields: [materialId], references: [id])
  materialId             Int
  materialCount          Float
  measurementUnit        String

  @@id([supplierConfirmationId, materialId])
psl=}

entity Receipt {=psl
  id              Int                @id @default(autoincrement())
  createdAt       DateTime           @default(now())
  purchaseOrder   PurchaseOrder      @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int                @unique
  materials       ReceiptMaterials[]

psl=}

entity ReceiptMaterials {=psl
  receipt         Receipt  @relation(fields: [receiptId], references: [id], onDelete: Cascade)
  receiptId       Int
  material        Material @relation(fields: [materialId], references: [id])
  materialId      Int
  materialCount   Float
  measurementUnit String

  @@id([receiptId, materialId])
psl=}

// ----------------- User operations ------------------ //

crud Materials {
  entity: Material,
  operations: {
    getAll: {
      overrideFn: import { getMaterials } from "@src/materials/operations/tasks.js"
    },
    update: {
      overrideFn: import { updateMaterial } from "@src/materials/operations/tasks.js"
    },
    delete: {}
  }
}

action createMaterial {
  fn: import { createMaterial } from "@src/materials/operations/actions.js",
  entities: [Material]
}

action updateMaterialCount {
  fn: import { updateMaterialCount } from "@src/materials/operations/actions.js",
  entities: [Material]
}

crud Products {
  entity: Product,
  operations: {
    getAll: {
      overrideFn: import { getProducts } from "@src/products/operations/tasks.js"
    },
    update: {
      overrideFn: import { updateProduct } from "@src/products/operations/tasks.js"
    },
    delete: {}
  }
}

action createProduct {
  fn: import { createProduct } from "@src/products/operations/actions.js",
  entities: [Product, ProductMaterials, Material]
}

crud ProductionPlans {
  entity: ProductionPlan,
  operations: {
    getAll: {
      overrideFn: import { getProductionPlans } from "@src/productionPlans/operations/tasks.js"
    },
    delete: {}
  }
}

query getActiveProductionPlans {
  fn: import { getActiveProductionPlans } from "@src/productionPlans/operations/queries.js",
  entities: [ProductionPlan]
}

action createProductionPlan {
  fn: import { createProductionPlan} from "@src/productionPlans/operations/actions.js",
  entities: [ProductionPlan, ProductionPlanProducts, Product]
}

crud Reservations {
  entity: Reservation,
  operations: {
    getAll: {
      overrideFn: import { getReservations } from "@src/reservations/operations/tasks.js"
    },
    delete: {}
  }
}

action createReservation {
  fn: import { createReservation } from "@src/reservations/operations/actions.js",
  entities: [User, Reservation, ProductionPlan]
}

crud PurchaseRequests {
  entity: PurchaseRequest,
  operations: {
    getAll: {
      overrideFn: import { getPurchaseRequests } from "@src/purchaseRequests/operations/tasks.js"
    },
    delete: {}
  }
}

action createPurchaseRequest {
  fn: import { createPurchaseRequest } from "@src/purchaseRequests/operations/actions.js",
  entities: [PurchaseRequest]
}

action updatePurchaseRequestProcessingDate {
  fn: import { updatePurchaseRequestProcessingDate } from "@src/purchaseRequests/operations/actions.js",
  entities: [PurchaseRequest]
}

action updatePurchaseRequestDeliveryDate {
  fn: import { updatePurchaseRequestDeliveryDate } from "@src/purchaseRequests/operations/actions.js",
  entities: [PurchaseRequest]
}

crud Suppliers {
  entity: Supplier,
  operations: {
    getAll: {
      overrideFn: import { getSuppliers } from "@src/suppliers/operations/tasks.js"
    },
    update: {}
  }
}

action createSupplier {
  fn: import { createSupplier } from "@src/suppliers/operations/actions.js",
  entities: [Supplier]
}

crud PurchaseOrders {
  entity: PurchaseOrder,
  operations: {
    getAll: {
      overrideFn: import { getPurchaseOrders } from "@src/purchaseOrders/operations/tasks.js"
    },
    update: {}
  }
}

action createPurchaseOrder {
  fn: import { createPurchaseOrder } from "@src/purchaseOrders/operations/actions.js",
  entities: [PurchaseOrder]
}

crud SupplierConfirmations {
  entity: SupplierConfirmation,
  operations: {
    getAll: {
      overrideFn: import { getSupplierConfirmations } from "@src/supplierConfirmations/operations/tasks.js"
    }
  }
}

action createSupplierConfirmation {
  fn: import { createSupplierConfirmation } from "@src/supplierConfirmations/operations/actions.js",
  entities: [SupplierConfirmation]
}

crud Receipts {
  entity: Receipt,
  operations: {
    getAll: {
      overrideFn: import { getReceipts } from "@src/receipts/operations/tasks.js"
    }
  }
}

action createReceipt {
  fn: import { createReceipt } from "@src/receipts/operations/actions.js",
  entities: [Receipt]
}