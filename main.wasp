app TestApp {
  wasp: {
    version: "^0.12.0"
  },
  title: "Material Planning",
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {
        userSignupFields: import { userSignupFields } from "@src/auth/operations/signup.js",
      }
    },
    onAuthFailedRedirectTo: "/login"
  },
  client: {
    rootComponent: import Root from "@src/pages/RootPage.tsx"
  },
  db: {
    system: PostgreSQL,
    seeds: [
      import { materialSeed } from "@src/seeds.js",
      import { productSeed } from "@src/seeds.js"
    ]
  }
}

// ----------------- Pages ------------------ //

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@src/auth/pages/SignupPage.tsx"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/auth/pages/LoginPage.tsx"
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  authRequired: true,
  component: import Main from "@src/pages/MainPage.tsx"
}

route MaterialRoute {path: "/materials", to: MaterialPage }
page MaterialPage {
  authRequired: true,
  component: import Material from "@src/materials/pages/MaterialPage.tsx"
}

route ProductRoute {path: "/products", to: ProductPage }
page ProductPage {
  authRequired: true,
  component: import Product from "@src/products/pages/ProductPage.tsx"
}

route ProductionPlanRoute {path: "/production-plans", to: ProductionPlanPage }
page ProductionPlanPage {
  authRequired: true,
  component: import ProductionPlan from "@src/productionPlans/pages/ProductionPlanPage.tsx"
}

route ReservationRoute {path: "/reservations", to: ReservationPage }
page ReservationPage {
  authRequired: true,
  component: import ReservationPlan from "@src/reservations/pages/ReservationPage.tsx"
}

// ----------------- Entities ------------------ //

entity User {=psl
  id           Int           @id @default(autoincrement())
  name         String?
  surrname     String?
  role         String?
  reservations Reservation[]?
psl=}

entity Material {=psl
  id              Int                @id @default(autoincrement())
  code            String             @unique
  name            String
  count           Float
  measurementUnit String
  products        ProductMaterials[]
psl=}

entity ProductMaterials {=psl
  product         Product  @relation(fields: [productId], references: [id])
  productId       Int
  material        Material @relation(fields: [materialId], references: [id])
  materialId      Int
  materialCount   Float
  measurementUnit String
  
  @@id([productId, materialId])
psl=}

entity Product {=psl
  id              Int                      @id @default(autoincrement())
  code            String                   @unique
  name            String
  description     String
  materials       ProductMaterials[]       
  productionPlans ProductionPlanProducts[]
psl=}

entity ProductionPlanProducts {=psl
  productionPlan   ProductionPlan @relation(fields: [productionPlanId], references: [id])
  productionPlanId Int
  product          Product  @relation(fields: [productId], references: [id])
  productId        Int
  productCount     Int
  
  @@id([productionPlanId, productId])
psl=}

entity ProductionPlan {=psl
  id           Int                    @id @default(autoincrement())
  code         String                 @unique
  createdAt    DateTime               @default(now())
  createdFor   DateTime
  status       String
  products     ProductionPlanProducts[]
  reservations Reservation[]
psl=}

entity Reservation {=psl
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now())
  createdFor       DateTime
  status           String
  user             User?          @relation(fields: [userId], references: [id])
  userId           Int?
  productionPlan   ProductionPlan @relation(fields: [productionPlanId], references: [id])
  productionPlanId Int
psl=}

// ----------------- User operations ------------------ //

crud Materials {
  entity: Material,
  operations: {
    getAll: {
      overrideFn: import { getMaterials } from "@src/materials/operations/tasks.js"
    },
    get: {},
    update: {
      overrideFn: import { updateMaterial } from "@src/materials/operations/tasks.js"
    },
    delete: {}
  }
}

action createMaterial {
  fn: import { createMaterial } from "@src/materials/operations/actions.js",
  entities: [Material]
}

crud Products {
  entity: Product,
  operations: {
    getAll: {
      overrideFn: import { getProducts } from "@src/products/operations/tasks.js"
    },
    get: {},
    update: {
      overrideFn: import { updateProduct } from "@src/products/operations/tasks.js"
    },
    delete: {}
  }
}

action createProduct {
  fn: import { createProduct } from "@src/products/operations/actions.js",
  entities: [Product, ProductMaterials, Material]
}

crud ProductionPlans {
  entity: ProductionPlan,
  operations: {
    getAll: {
      overrideFn: import { getProductionPlans } from "@src/productionPlans/operations/tasks.js"
    },
    get: {},
    update: {},
    delete: {}
  }
}

query getActiveProductionPlans {
  fn: import { getActiveProductionPlans } from "@src/productionPlans/operations/queries.js",
  entities: [ProductionPlan]
}

action createProductionPlan {
  fn: import { createProductionPlan} from "@src/productionPlans/operations/actions.js",
  entities: [ProductionPlan, ProductionPlanProducts, Product]
}

crud Reservations {
  entity: Reservation,
  operations: {
    getAll: {
      overrideFn: import { getReservations } from "@src/reservations/operations/tasks.js"
    },
    get: {},
    update: {},
    delete: {}
  }
}

action createReservation {
  fn: import { createReservation } from "@src/reservations/operations/actions.js",
  entities: [User, Reservation, ProductionPlan]
}
