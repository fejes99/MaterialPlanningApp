app TestApp {
  wasp: {
    version: "^0.11.8"
  },
  title: "Material Planning",
  dependencies: [
    ("@tailwindcss/forms", "^0.5.7"),
    ("@tailwindcss/typography", "^0.5.10"),
    ("@headlessui/react", "1.7.18"),
    ("@heroicons/react", "2.1.1"),
    ("flowbite-react", "0.7.2"),
  ],
  client: {
    rootComponent: import Root from "@client/RootPage.tsx"
  },
  db: {

    system: PostgreSQL,
    seeds: [
      import { materialSeed } from "@server/seeds.js",
      import { productSeed } from "@server/seeds.js"
    ]
  }
}

// ----------------- Pages ------------------ //

route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import Main from "@client/MainPage.tsx"
}

route MaterialRoute {path: "/materials", to: MaterialPage }
page MaterialPage {
  component: import Material from "@client/pages/MaterialPage.tsx"
}

route ProductRoute {path: "/products", to: ProductPage }
page ProductPage {
  component: import Product from "@client/pages/ProductPage.tsx"
}

route ProductionPlanRoute {path: "/production-plans", to: ProductionPlanPage }
page ProductionPlanPage {
  component: import ProductionPlan from "@client/pages/ProductionPlanPage.tsx"
}

// ----------------- Entities ------------------ //

entity Material {=psl
  id              Int                @id @default(autoincrement())
  code            String             @unique
  name            String
  count           Int
  measurementUnit String
  products       ProductMaterials[]
psl=}

entity ProductMaterials {=psl
  product         Product  @relation(fields: [productId], references: [id])
  productId       Int
  material        Material @relation(fields: [materialId], references: [id])
  materialId      Int
  materialCount   Int
  measurementUnit String
  
  @@id([productId, materialId])
psl=}

entity Product {=psl
  id              Int                      @id @default(autoincrement())
  code            String                   @unique
  name            String
  description     String
  materials       ProductMaterials[]       
  productionPlans ProductionPlanProducts[]
psl=}

entity ProductionPlanProducts {=psl
  productionPlan   ProductionPlan @relation(fields: [productionPlanId], references: [id])
  productionPlanId Int
  product          Product  @relation(fields: [productId], references: [id])
  productId        Int
  productCount     Int
  
  @@id([productionPlanId, productId])
psl=}

entity ProductionPlan {=psl
  id         Int                    @id @default(autoincrement())
  code       String                 @unique
  createdAt  DateTime               @default(now())
  createdFor DateTime
  status     String
  products ProductionPlanProducts[]
psl=}

// ----------------- User operations ------------------ //

crud Materials {
  entity: Material,
  operations: {
    getAll: {
      overrideFn: import { getMaterials } from "@server/materials/tasks.js"
    },
    get: {},
    update: {
      overrideFn: import { updateMaterial } from "@server/materials/tasks.js"
    },
    delete: {}
  }
}

action createMaterial {
  fn: import { createMaterial } from "@server/materials/actions.js",
  entities: [Material]
}

crud Products {
  entity: Product,
  operations: {
    getAll: {
      overrideFn: import { getProducts } from "@server/products/tasks.js"
    },
    get: {},
    update: {
      overrideFn: import { updateProduct } from "@server/products/tasks.js"
    },
    delete: {}
  }
}

action createProduct {
  fn: import { createProduct } from "@server/products/actions.js",
  entities: [Product, ProductMaterials, Material]
}

crud ProductionPlans {
  entity: ProductionPlan,
  operations: {
    getAll: {
      overrideFn: import {getProductionPlans} from "@server/productionPlans/tasks.js"
    },
    get: {},
    update: {},
    delete: {}
  }
}

action createProductionPlan {
  fn: import { createProductionPlan} from "@server/productionPlans/actions.js",
  entities: [ProductionPlan, ProductionPlanProducts, Product]
}
